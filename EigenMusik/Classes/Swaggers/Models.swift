// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }
    
    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictinoary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictinoary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }
    
    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }
	
    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
                let sourceString = source as! String
                for formatter in formatters {
                    if let date = formatter.dateFromString(sourceString) {
                        return date
                    }
                }
                fatalError("formatter failed to parse \(sourceString)")
            } 

			// Decoder for [TrackStreamUrl]
            Decoders.addDecoder(clazz: [TrackStreamUrl].self) { (source: AnyObject) -> [TrackStreamUrl] in
                return Decoders.decode(clazz: [TrackStreamUrl].self, source: source)
            }
			// Decoder for TrackStreamUrl
            Decoders.addDecoder(clazz: TrackStreamUrl.self) { (source: AnyObject) -> TrackStreamUrl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TrackStreamUrl()
                instance.streamUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["streamUrl"])
                return instance
            }
			

			// Decoder for [Page«Track»]
            Decoders.addDecoder(clazz: [Page«Track»].self) { (source: AnyObject) -> [Page«Track»] in
                return Decoders.decode(clazz: [Page«Track»].self, source: source)
            }
			// Decoder for Page«Track»
            Decoders.addDecoder(clazz: Page«Track».self) { (source: AnyObject) -> Page«Track» in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Page«Track»()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.first = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first"])
                instance.last = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["last"])
                instance.number = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number"])
                instance.numberOfElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfElements"])
                instance.size = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["size"])
                instance.sort = Decoders.decodeOptional(clazz: Sort.self, source: sourceDictionary["sort"])
                instance.totalElements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalElements"])
                instance.totalPages = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalPages"])
                return instance
            }
			

			// Decoder for [User]
            Decoders.addDecoder(clazz: [User].self) { (source: AnyObject) -> [User] in
                return Decoders.decode(clazz: [User].self, source: source)
            }
			// Decoder for User
            Decoders.addDecoder(clazz: User.self) { (source: AnyObject) -> User in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = User()
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.userProfile = Decoders.decodeOptional(clazz: UserProfile.self, source: sourceDictionary["userProfile"])
                return instance
            }
			

			// Decoder for [UserProfile]
            Decoders.addDecoder(clazz: [UserProfile].self) { (source: AnyObject) -> [UserProfile] in
                return Decoders.decode(clazz: [UserProfile].self, source: source)
            }
			// Decoder for UserProfile
            Decoders.addDecoder(clazz: UserProfile.self) { (source: AnyObject) -> UserProfile in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserProfile()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                return instance
            }
			

			// Decoder for [TrackSource]
            Decoders.addDecoder(clazz: [TrackSource].self) { (source: AnyObject) -> [TrackSource] in
                return Decoders.decode(clazz: [TrackSource].self, source: source)
            }
			// Decoder for TrackSource
            Decoders.addDecoder(clazz: TrackSource.self) { (source: AnyObject) -> TrackSource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TrackSource()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.owner = Decoders.decodeOptional(clazz: SourceAccount.self, source: sourceDictionary["owner"])
                instance.source = (sourceDictionary["source"] as? String).map { TrackSource.Source(rawValue: $0)! } 
                instance.uri = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["uri"])
                return instance
            }
			

			// Decoder for [SourceAccount]
            Decoders.addDecoder(clazz: [SourceAccount].self) { (source: AnyObject) -> [SourceAccount] in
                return Decoders.decode(clazz: [SourceAccount].self, source: source)
            }
			// Decoder for SourceAccount
            Decoders.addDecoder(clazz: SourceAccount.self) { (source: AnyObject) -> SourceAccount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SourceAccount()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.owner = Decoders.decodeOptional(clazz: UserProfile.self, source: sourceDictionary["owner"])
                instance.source = (sourceDictionary["source"] as? String).map { SourceAccount.Source(rawValue: $0)! } 
                instance.uri = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["uri"])
                return instance
            }
			

			// Decoder for [Track]
            Decoders.addDecoder(clazz: [Track].self) { (source: AnyObject) -> [Track] in
                return Decoders.decode(clazz: [Track].self, source: source)
            }
			// Decoder for Track
            Decoders.addDecoder(clazz: Track.self) { (source: AnyObject) -> Track in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Track()
                instance.album = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["album"])
                instance.artist = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["artist"])
                instance.createdBy = Decoders.decodeOptional(clazz: UserProfile.self, source: sourceDictionary["createdBy"])
                instance.createdOn = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdOn"])
                instance.duration = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["duration"])
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.trackSource = Decoders.decodeOptional(clazz: TrackSource.self, source: sourceDictionary["trackSource"])
                return instance
            }
			

			// Decoder for [Inline_response_200]
            Decoders.addDecoder(clazz: [Inline_response_200].self) { (source: AnyObject) -> [Inline_response_200] in
                return Decoders.decode(clazz: [Inline_response_200].self, source: source)
            }
			// Decoder for Inline_response_200
            Decoders.addDecoder(clazz: Inline_response_200.self) { (source: AnyObject) -> Inline_response_200 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200()
                return instance
            }
			
        }
    }
}
